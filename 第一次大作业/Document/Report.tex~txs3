\documentclass{ctexart}

\usepackage{fancyhdr}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{amsmath}
\usepackage{algorithm}
\usepackage{graphicx}
\usepackage[noend]{algpseudocode}
\usepackage{physics}
\usepackage{multirow}

% Codes settings
\lstset{
	language=Python,
	numbers = left,
	numberstyle = \tiny,
	basicstyle = \small,
	keywordstyle = \color{blue!70}\bfseries,
	stringstyle = \color{red},
	commentstyle =\color[rgb]{0.6,.6,.6}\itshape,
	identifierstyle={},
	frame = shadowbox,
	rulesepcolor= \color{ red!20!green!20!blue!20},
	escapeinside=``
}

%Page setting
\pagestyle{fancy}
\rfoot{\thepage}
\cfoot{}
\lfoot{\itshape Jeffreyyao@pku.edu.cn}

\title{计算物理大作业}
\author{姚铭星}
\date{1700011321}
 		
\begin{document}
\maketitle
\thispagestyle{fancy}


\section{第一题：十进制整数与双精度浮点数的相互转换}
\subsection{问题描述}
编写两个程序，实现任意十进制数与其规范化二进制双精度浮点数之间的转换，并举足够多的算例说明你程序的正确性
\subsection{思路}
在IEEE 754标准下, double型机器数的编码长度为$64$, 格式为
\begin{gather}
\begin{tabular}{c|ccc|ccc}
(S)$_2$        & \multicolumn{3}{c|}{(E)$_2$}           & \multicolumn{3}{c}{(T)$_2$}            \\ \hline
a{[}0{]} & a{[}1{]} & ... & a{[}11{]} & a{[}12{]} & ... & a{[}63{]}
\end{tabular}
\\
d = (-)^\mathrm{S}\times\left\{\begin{array}{rcl}
2^{\mathrm{E}-1023}(1+2^{-52}\mathrm{T})& &\text{if }\mathrm{E}>0\\
2^{-1022}(0+2^{-52}\mathrm{T})& &\text{if }\mathrm{E}=0
\end{array} \right.
\end{gather}

\section{第二题：高斯求积}
\subsection{问题描述}
构造以下几种非标准权函数的Gauss求积公式的求积系数与节点：

\begin{align}
\int_{0}^{1} \sqrt{x} f(x) \mathrm{d} x &\approx A_{0} f\left(x_{0}\right)+A_{1} f\left(x_{1}\right)\label{Equa::1} \\
\int_{-1}^{1}\left(1+x^{2}\right) f(x) \mathrm{d} x &\approx A_{0} f\left(x_{0}\right)+A_{1} f\left(x_{1}\right) \label{Equa::2}\\
\int_{0}^{1} \sqrt{x} f(x) \mathrm{d} x &\approx A_{0} f\left(x_{0}\right)+A_{1} f\left(x_{1}\right)+A_{2} f\left(x_{2}\right) \label{Equa::3}
\end{align}
\subsection{思路}
具有如下形式的积分问题可以用高斯求积来解决：
$$\int_{a}^{b} w(x)f(x)dx$$
解决高斯求积问题的关键是找到一组在该权函数下的正交基。
在定义内积
\[ (f,g)=\int_{a}^{b} w(x)f(x)g(x)dx \]
的前提下，权重以及正交基满足下列关系:
\begin{align*}
p_{-1}(x)&=0\\
p_0 (x)&=1\\
p_{j+1}(x)&=(x-a_j)p_{j}(x)-b_jp_{j-1}(x)
\end{align*}
其中：
\begin{align*}
a_j&=\frac{(xp_j,p_j)}{(p_j,p_j)}\\
b_j&=\frac{(p_{j},p_{j})}{(p_{j-1},p_{j-1})}
\end{align*}
设$x_{\mu}$是正交多项式$p_N(x)$的第$\mu$个根，则系数满足：
\begin{equation}\label{w}
A_j=\frac{(p_{N-1}(x),p_{N-1}(x))}{p_{N-1}(x_j)p'_{N}(x_j)}
\end{equation}
\subsection{伪代码}
求解流程大概按下面进行
\begin{enumerate}
	\item 赋予初始条件$P_{-1}(x)=0$和$P_0(x)=1$
	\item 利用递推关系，构建N个在权函数$w(x)$下正交的多项式
	\item 求解每一个多项式的根
	\item 根据式\ref{w}求解系数$A_j$
\end{enumerate}
\subsection{实现}
具体操作中调用了\textbf{numpy.poly1d()}类，简化了大部分计算过程。
\begin{lstlisting}
import numpy as np
def sqrtbuild(N):
	'''
	构造以\sqrt[x]为权函数的最高位N的正交多项式
	'''
	res = [0 for _ in range(N+2)] #把 n =-1存在了第一个
	res[0] = np.poly1d([0])
	res[1] = np.poly1d([1])
	for x in range(1,N+1):
		p1 = np.poly1d([1,0])*res[x]**2
		p2 = res[x]**2
		p3 = res[x-1]**2
		a = sqrtinte(p1)/sqrtinte(p2)
		b = sqrtinte(p2)/sqrtinte(p3) if x >1 else 0
		res[x+1] = np.poly1d([1,-a])*res[x] - b*res[x-1] #防止出现0/0
	return res[1:len(res)]
\end{lstlisting}
求根直接调用\textbf{poly1d}的成员$r$。
\subsection{结果}

\begin{table}[hbtp]
	\centering
	\caption{各非标准权函数的Gauss求积公式的求积系数和节点}
	\label{tab:Gauss-main}
	\begin{tabular}{c|c|rr}
		\hline
		机械求积公式      & $k$ & $x_k$        & $A_k$       \\ \hline
		\multirow{2}{*}{(\ref{Equa::1})} & 0 & 0.28994920  & 0.27755600 \\
		& 1 & 0.82116191  & 0.38911067 \\ \hline
		\multirow{2}{*}{(\ref{Equa::2})} & 0 & -0.63245553 & 1.33333333 \\
		& 1 & 0.63245553  & 1.33333333 \\ \hline
		\multirow{3}{*}{(\ref{Equa::3})} & 0 & 0.16471029  & 0.12578267 \\
		& 1 & 0.54986850  & 0.30760237 \\
		& 2 & 0.90080583  & 0.23328162 \\ \hline
	\end{tabular}
\end{table}

\subsection{结果检验}
理论上来说，拥有$n$个节点的Gaussian求积公式应当有$2n+1$的代数精度。

对于$n=3$的情况，不难代入mathematica验证其精度与输入有效位数相同（即及其精度）

\section{第三题：放射衰变问题}

\subsection{问题描述}
考虑A和B两类原子核随时间的放射衰变问题，t时刻， 其布居数分别为$N_A(t)$和$N_B(t)$。假定A类核衰变为B类核，B类核可以继续衰变，满足以下微分方程组：

$$
\begin{array}{c}{\frac{d N_{A}}{d t}=-\frac{N_{A}}{\tau_{A}}} \\ {\frac{d N_{B}}{d t}=\frac{N_{A}}{\tau_{A}}-\frac{N_{B}}{\tau_{B}}}\end{array}
$$

其中,$\tau_A$和$\tau_B$是时间衰变常数，在给定初始条件$t_i=0$时$N_A(t_i)=N_B(t_i)=1$下，回答下面三个问题：
\begin{enumerate}
	\item 给出问题的解析解
	\item 使用合适的算法数值求解上述耦合方程
	\item 在给定$\tau_A = 1s$，分别讨论$\tau_B=0.1s\text{,}1s\text{,}10s\text{,}$三种情况下的短期和长期衰变行为。选取$\tau_B=10s$这种情况，讨论数值算法的误差，展示取不同步长$\Delta t = 0.2s\text{,}0.1s\text{,}0.05s$时与解析结果的比较
\end{enumerate}
\subsection{解析结果}
解析解可以直接给出：
\begin{equation}
\begin{array}{c}
N_A(t)= e^{-t/\tau_A}\\
N_B(t)= \frac{\tau_B}{\tau_A-\tau_B}e^{-t/\tau_A} + \frac{\tau_A-2\tau_B}{\tau_B-\tau_B}e^{-t/\tau_B}
\end{array} \label{NB}
\end{equation}
`
\subsection{思路}
由于方程形式很简单，可以直接用有限差分的形式来代替微分,从而得到递推关系：
\[
\begin{array}{c}
N_A((i+1) \Delta t)-N_A(i \Delta t)=-N_A(i \Delta t) \cdot \frac{\Delta t}{\tau_A}\\
N_B((i+1) \Delta t)-N_B(i \Delta t)=-N_B(i \Delta t) \cdot \frac{\Delta t}{\tau_B}+N_A(i \Delta t) \cdot \frac{\Delta t}{\tau_A}
\end{array}
\]
经过$N=t_{max}/\Delta t$步迭代就能得到答案。
\subsection{实现}
\begin{lstlisting}
def decay(ta,tb,dt,tmax=1):
'''
衰变函数
返回<class='tuple'> (NA,NB)
'''
	n = 0
	NA=[1]
	NB=[1]
	while n*dt < tmax :
		NA.append(NA[n]*(1-dt/ta))  
		NB.append(NB[n]*(1-dt/tb)+NA[n]*(dt/ta))
		n+=1
	return (NA,NB)
\end{lstlisting}
\subsection{结果讨论}
\subsubsection{短期衰变}
在固定$\tau_A=1s$后，可以认为，当时间$t_{max}$小于任何一个半衰期，就可以认为是短期衰变，这里取固定$t_{max}=0.1s$

计算结果如下图:
\begin{figure}[hbt]
	\centering
	\includegraphics[width=8cm]{./fig/Figure_1.png}
	\caption{短程结果}
\end{figure}
\begin{figure}
	\centering
	\includegraphics[width=8cm]{./fig/Figure_2.png}
	\caption{短程结果}
\end{figure}
\begin{figure}
	\centering
	\includegraphics[width=8cm]{./fig/Figure_3.png}	
	\caption{短程结果}
\end{figure}
不难看出，当$t\tau_B = 0.1s<\tau_A$时，二者短程呈现下降趋势。当$\tau_B = 1 = \tau_A$时，$N_B$短程内几乎不发生变化。而当$\tau_B = 10s > \tau_A$时，$N_B$开始呈现上升趋势，这与式\ref{NB}是一致的。
\subsubsection{长期衰变}
同样地，我们取$t_{max}=100s>max(\tau_A,\tau_B)$，以研究长程情况

计算结果如下图：
\begin{figure}
	\centering
	\includegraphics[width=8cm]{./fig/Figure_4.png}
	\caption{长期衰变}
\end{figure}
\begin{figure}
	\centering
	\includegraphics[width=8cm]{./fig/Figure_5.png}
	\caption{长期衰变}
\end{figure}
\begin{figure}
	\centering
	\includegraphics[width=8cm]{./fig/Figure_6.png}
	\caption{长期衰变}
\end{figure}
也可以看出，去除最开始的那段短程过程有些许不同之外，在最后都会趋于零。
\subsubsection{误差}
对于每一次计算，可以利用泰勒展开估计误差
$$N((i+1)\Delta t)=N(i\Delta t) + N'(i\Delta t)\cdot\Delta t + \frac{1}{2}N^{(2)}(\xi)\Delta t^2$$
在忽略机器精度的情况下，绝对误差可以估计为一个上界：
$$\Delta(t)\leq\frac{1}{2}\frac{\Delta t\cdot t}{\tau^2}$$
等号当且仅当在$t=0$时成立。

下面是实际的情况（绝对误差随时间的变化）,可以看出，在尺度上而言，的确是与$\Delta t$的取值成正比
\begin{figure}
	\centering
	\includegraphics[width=8cm]{./fig/Error.png}
	\caption{误差随时间的变化}
\end{figure}

\newpage
\section{第四题：三次样条差值}
\subsection{问题描述}
对于飞机机翼的轮廓每隔$0.1 m $的值，利用自然边界条件，使用三次样条插值估计任意一点的$y$值，需要与原始数据点一同绘制出飞机的轮廓曲线。
\begin{table}[htb]
	$$
	\begin{array}{c|cccccccccc}
	\hline x & {0} & {3} & {5} & {7} & {9} & {11} & {12} & {13} & {14} & {15} \\ \hline y & {0} & {1.2} & {1.7} & {2.0} & {2.1} & {2.0} & {1.8} & {1.2} & {1.0} & {1.6} \\ 
	\hline
	\end{array}
	$$
\end{table}
\subsection{三次样条插值}
三次样条差值也是多项式插值的一种。相比于拉格朗日插值和牛顿插值等多项式插值，三次样条方法拥有更加高阶的导数连续性。具体来说，三次样条方法不仅要求在插值点上有连续的函数值，而且还要求有连续的一阶以及二阶导数值。即因满足条件：
$$
\left\{\begin{array}{l}{S\left(x_{i}-0\right)=S\left(x_{i}+0\right)} \\ {S^{\prime}\left(x_{i}-0\right)=S^{\prime}\left(x_{i}+0\right), \quad i=1,2, \cdots, n-1} \\ {S^{\prime \prime}\left(x_{i}-0\right)=S^{\prime \prime}\left(x_{i}+0\right)}\end{array}\right.
$$

在每一个区间$x \in\left[x_{k}, x_{k+1}\right]$内部使用三次函数差值。

类似于Hermite插值法，使用分段Hermite多项式，此时零阶和一阶条件自动满足：

$$
H_{3}^{(k)}(x)=y_{k} \alpha_{0}^{(k)}(x)+y_{k+1} \alpha_{1}^{(k)}(x)+y_{k}^{\prime} \beta_{0}^{(k)}(x)+y_{k+1}^{\prime} \beta_{1}^{(k)}(x)
$$

取用各节点的一阶导数为未知数$S^{\prime}\left(x_{i}\right)=m_{i}$，利用二阶导数条件：
$$
\mu_{i} m_{i+1}+2 m_{i}+\lambda_{i} m_{i-1}=e_{i}, \quad i=1,2, \cdots, n-1
$$
其中$ \mu_{j} =\frac{h_{j-1}}{h_{j-1}+h_{j}}, \quad \lambda_{j}=\frac{h_{j}}{h_{j-1}+h_{j}}, e_{i} =3\left(\lambda_{i} f\left[x_{i-1}, x_{i}\right]+\mu_{i} f\left[x_{i}, x_{i+1}\right]\right)$

并且使用自然边界条件：
\[S''(0) = S''(x_{n-1}) = 0\]

这样问题变为求解三对角矩阵方程解问题，可以利用追赶法快速求解。
\subsection{实现}
\begin{lstlisting}
def firstorder(x,y):
	'''
	返回插值中n个点的一阶导数m_i
	采用三转角方程求解一阶导数
	'''
	# 建立矩阵
	mu=[h(i-1)/(h(i)+h(i-1)) for i in range(1,n)]
	lamb=[h(i)/(h(i)+h(i-1)) for i in range(1,n)]
	# 建立待解向量
	b = [3*d(0)]+[3*(lamb[i-1]*d(i-1)+mu[i-1]*d(i))\# 写不下换行
		for i in range(1,n)]+[3*d(n-1)]
	mu = [1] + mu
	lamb = lamb +[1]
	dia = [2 for _ in range(n+1)]
	# 开始追赶法求解三对角矩阵
	for i in range(1,n+1):
		lamb[i-1] = lamb[i-1]/dia[i-1]
		dia[i] = dia[i] - mu[i-1]* lamb[i-1]
		b[i] -= b[i-1]*lamb[i-1]
		m = [-1 for _ in range(n+1)]
	m[n] = b[n]/dia[n]
	for i in range(n-1,-1,-1):
		m[i] = (b[i] - mu[i]*m[i+1])/dia[i]
	return m
\end{lstlisting}
\newpage
\subsection{结果分析}
可以看出，函数的光滑性是很好的。
\begin{figure}[hbt]
	\centering
	\includegraphics[width=12cm]{./fig/Cubic_spline.png}
\end{figure}

\newpage
\section{第五题：求解对称带状正定矩阵}
\subsection{题目描述}
对于带宽为$2m+1$的对称正定带状矩阵$\mathbf{A}$,可以分解为$\mathbf{A}=\mathbf{L} \mathbf{D} \mathbf{L}^{T}$。结果可以用于求解一般的对称正定带状线性方程组$\mathbf{A x}=\mathbf{b}$。

题目中给定的对称带状矩阵$\mathbf{A}$,$m=2$,非零元素为$a_{11}=a_{n n}=5 ; \quad a_{i i}=6(i=2, \ldots, n-1) ; \quad a_{i, i-1}=4(i=2, \ldots, n) ; a_{i, i-2}=1(i=3, \ldots, n)$，右端向量为$\mathbf{b}=(60,120, \dots, 120,60)^{T}$。给出$n=100$和$n=10000$两个算例。

\subsection{算法描述}
对称带状矩阵也可以使用Cholesky分解方法,可以假定$\mathbf{D}_{ij} = 1/l_{ii}$，由矩阵乘法的可以得到公式：
$$
l_{i j}=a_{i j}-\sum_{k=r}^{j-1} l_{i k} l_{j k} / l_{k k}, i=0,1,2, \ldots, n-1
$$
其中：
$$
r=\left\{\begin{array}{ll}{0,} & {i \leq m+1} \\ {i-m,} & {i>m+1}\end{array}\right.
$$

同时将右端向量也做分解,$\mathbf{b}=\mathbf{L D} \tilde{\mathbf{b}}$，具体来说：
$$
\tilde{b}_{i}=b_{i}-\sum_{j=r}^{i-1} l_{i j} \tilde{b}_{j} / l_{j j}, \quad i=0,1,2, \ldots, n-1
$$
最后再求解等价线性方程组，$\mathbf{L}^{\mathbf{T}} \mathbf{x}=\tilde{\mathbf{b}}$,利用回代过程:
$$
x_{i}=\left(\tilde{b}_{i}-\sum_{j=i+1}^{t} l_{j i} x_{j}\right) / l_{i i}, i= n-1, \ldots, 1,0
$$
其中:
$$
t=\left\{\begin{array}{ll}{n-1,} & {i>n-m-1} \\ {i+m,} & {i \leq n-m-1}\end{array}\right.
$$
关于储存，由于题干中要求时空复杂度做到最小，因此我们采用$(m+1)$个向量（数组）来储存，在求解的过程中不需要额外的向量来储存矩阵元。解向量也只用一个$n$维向量储存，不需要额外的空间。总的来说，空间复杂度为$\mathcal{O}(mn)$。在时间复杂度方面，第一步Cholesky分解的复杂度为$\mathcal{O}(m^2n)$，而后的每一步复杂度都为$\mathcal{O}(mn)$。总的来说，计算的空间复杂度为$\mathcal{O}(m^2n)$
\subsection{实现}
\begin{lstlisting}
def cholesky(n, m, a, b):
	"""
	Cholesky求解方法,返回解向量和矩阵
	return a,b
	"""
	# print(a)c
	for k in range(n):
		#先解对角元素
		a[0][k] -= sum([a[k-j][j]**2*a[0][j] for j in range(max(0,k-m),k)])
		for l in range(1, min(n-k,m+1)):
			a[l][k] -= sum([a[k-j][j]*a[0][j]*a[l+k-j][j] for j in\
			range(max(0,l+k-m),k)])
			a[l][k] /= a[0][k]	
	#回代解方程
	for k in range(n):
		b[k] -= sum([a[k-j][j]*b[j] for j in range(max(0,k-m),k)])
	for k in range(n):
		b[k] /= a[0][k]
	for k in range(n):
		ki = n-1-k
		b[ki] -= sum([a[j][ki]*b[ki+j] for j in range(1,min(n-ki,m+1))])
	return a,b
\end{lstlisting}
\subsection{结果讨论}
为了更加直观地讨论问题，将解出来的解向量画为折线图，可以看出，体系包络的大小正比于$n^2$
\begin{figure}[hbt]
	\centering
	\includegraphics[width=7cm]{./fig/cholesky_1.png}
	\caption{$n=100$算例}
\end{figure}
\begin{figure}[hbt]
	\centering 
	\includegraphics[width=7cm]{./fig/cholesky_2.png}
	\caption{$n=10000$算例}
\end{figure}
\section{第六题：共轭梯度法求解稀疏矩阵线性方程组}
\subsection{题目要求}
对于给定的稀疏矩阵
$$
\mathbf{A}=\left[ \begin{array}{cccccc}{3} & {-1} & {0} & {\cdots} & {0} & {\frac{1}{2}} \\ {-1} & {3} & {-1} & {\cdots} & {\frac{1}{2}} & {0} \\ {0} & {-1} & {3} & {\cdots} & {0} & {0} \\ {\vdots} & {\vdots} & {\vdots} & { } & {\vdots} & {\vdots} \\ {0} & {\frac{1}{2}} & {0} & {\cdots} & {3} & {-1} \\ {\frac{1}{2}} & {0} & {0} & {\cdots} & {-1} & {3}\end{array}\right]
$$
利用共轭梯度法,求解线性方程组$\mathbf{A x}=\mathbf{b}$，并且要求两次的迭代误差要求小于$\epsilon = 10^{-6}$。

分别取$n=100$和$n=10000$展示结果。

\subsection{算法描述}
共轭梯度法本质上属于一种迭代法，因此可以很好地利用矩阵稀疏性。相比于最速下降法，共轭梯度法避免了每一次下降的方向不变的缺点。实际上，每一步下降的矢量方向$p_i$都是$\mathbf{A}$正交的，即$p^{T}_i\mathbf{A}p_j=0$

由于题目中给定的矩阵是一个对称正定矩阵，因此不用进一步进行预处理即可直接应用共轭梯度法。

算法判停的条件是
$$
\left\|\mathbf{b}-\mathbf{A} \mathbf{x}_{\mathbf{k}}\right\| /\|\mathbf{b}\| \leq \epsilon
$$
具体操作上是使用的$2-$范数
\subsection{实现}
\begin{lstlisting}
def CGM(e,b,A,x=[0 for _ in range(n)]):
	'''Input error bound e and ndarray b and sparse matrix A
	return solution ndarray x
	'''
	x = np.array(x)
	r = b - A*x # 计算初始残差
	p = r # 计算初始方向矢量
	epsilon = np.dot(r.T,r)
	k = 0
	while epsilon >= e :
		delt = A*p
		a = np.dot(r,p)/np.dot(r,delt) # a是标量
		x = x + a*p
		r = r - a*delt # 更新残差
		beta = - np.dot(r,delt)/np.dot(p,delt)
		p = r + beta*p # 更新下降方向
		k += 1
		epsilon = np.dot(r.T,r) # 计算误差矢量的2-范数
		print(k,"error : ",epsilon) #输出每一步的数值
	return x
\end{lstlisting}
\subsection{结果讨论}
直接画出结果随坐标的变化
\begin{figure}[hbt]
	\centering
	\includegraphics[width=9cm]{./fig/conjugate.png}
	\caption{$n=10000$的算例}
\end{figure}
\begin{figure}[hbt]
	\centering
	\includegraphics[width=9cm]{./fig/conjugate_2.png}
	\caption{$n=100$的算例}
\end{figure}
可以发现，结果残差被控制得很好。

\section{第七题：氢原子定态波函数求解}
\subsection{广义拉盖尔多项式}
\subsubsection{原理}
氢原子的径向波函数可以表示为广义拉盖尔多项式：
$$
R_{n l}(r)=\sqrt{\left(\frac{2}{n a_{\mu}}\right)^{3} \frac{(n-l-1) !}{2 n(n+l) !}} e^{-r / n a_{\mu}}\left(\frac{2 r}{n a_{\mu}}\right)^{l} L_{n-l-1}^{2 l+1}\left(\frac{2 r}{n a_{\mu}}\right)
$$
对此，要求解氢原子波函数问题，就需要计算广义拉盖尔多项式$L_n^\alpha(x)$。

具体来说，可以利用广义拉盖尔的递推公式：

$$
L_{n+1}^{(\alpha)}(x)=\frac{1}{n+1}\left((2 n+1+\alpha-x) L_{n}^{(\alpha)}(x)-(n+\alpha) L_{n-1}^{(\alpha)}(x)\right)
$$

以及初始条件：

$$
\begin{array}{l}{L_{0}^{(\alpha)}(x)=1} \\ {L_{1}^{(\alpha)}(x)=-x+\alpha+1}\end{array}
$$

这样，就可以直接通过递推得到广义拉盖尔多项式的值。时间复杂度为$\mathcal{O}(n)$。
\subsubsection{实现}
\begin{lstlisting}
def LaguerreL(n,a,x):
	'''
	To calculate generalized Laguerre polinomial 
	return L^a_n(x)
	'''
	Li = 1
	Lip = 1-x+a 
	if n = = 1:
		return Lip
	elif n==0:
		return Li
	else:
		for i in range(1,n):# 进行迭代
			Li,Lip=Lip,1/(i+1)*((2*i+1+a-x)*Lip-(i+a)*Li)
	return Lip
\end{lstlisting}
\subsubsection{结果}
注意到Python的\textbf{Scipy}库中有\textbf{scipy.special.genlaguerre}方法，因此利用内置函数计算出这种方法的误差：
\begin{figure}[hbt]
	\centering
	\includegraphics[width=12cm]{./fig/laguerre.png}
	\caption{广义拉盖尔函数与内置函数的误差}
\end{figure}

以及下面为题目中要求的表格：
\begin{table}[hbt]
	\begin{tabular}{l|lll}
		$x=10^{-3}$ & n=3       & 10              & 30                \\\hline
		$\alpha=2$         & 9.9900    & 65.780          & 491.058           \\\hline
		20          & 1770.747  & 30030710.776    & 47061929154802.58 \\\hline
		40          & 12340.097 & 10269773004.722 & 5.5307e+19       
	\end{tabular}
\end{table}
\subsection{球谐函数}
\subsubsection{思路}
求解球谐函数的关键是求解连带勒让德多项式，同样地我们采用递推公式方法。
$$
\begin{array}{l}{(\ell-m+1) P_{\ell+1}^{m}(x)=(2 \ell+1) x P_{\ell}^{m}(x)-(\ell+m) P_{\ell-1}^{m}(x)} \\ {2 m x P_{\ell}^{m}(x)=-\sqrt{1-x^{2}}\left[P_{\ell}^{m+1}(x)+(\ell+m)(\ell-m+1) P_{\ell}^{m-1}(x)\right]}\end{array}
$$
实际上我们已知的是$P_0^0(x)=1$和$P_1^0(x)=x$。我们的目的可以变为在一个二维网格上从$(0,0)$点走到$(l,m)$点。思路是首先利用勒让德多项式的递推公式走到$(l,0)$点，再利用连带勒让德的递推公式走到$(l,m)$点。
\subsubsection{实现}
\begin{lstlisting}
def GeneralizedLegrend(l,m,x):
	'''
	求解连带勒让德函数
	基本思路是利用递推公式达到二维平面上(l,m)这个点
	先达到(l,0)，求解勒让德函数
	返回连带勒让德P^l_m(x)
	'''
	Pi = 1
	Pip = x
	sq = ms.sqrt(1-x**2) #减少开方运算
	for i in range(1,l):
		Pip,Pi=((2*i+1)*x*Pip-i*Pi)/(i+1),Pip
	# 利用(l,0)和(l-1,0)求出(l,1)
	Pii = l*(x*Pip-Pi)/sq
	# 继续迭代得到(l,m)
	for i in range(1,m):
		Pii,Pip=(-2*i*x*Pii/sq-(l+i)*(l-i+1)*Pip),Pii
	return Pii
\end{lstlisting}
\subsubsection{问题}
上面这种朴素的方法能够在$l$和$m$很小的时候达到很高的精度，但是对于作业中要求的$l=500$和$m=499$的问题，会出现上溢问题，因此采用重新定义连带勒让德函数的方式来解决。

定义新的连带勒让德函数：

$$
\widetilde{P}_{l}^{m}(x)=\sqrt{\frac{2 l+1}{4 \pi} \frac{(l-m) !}{(l+m) !}} P_{l}^{m}(x)
$$

满足新的递推关系：

$$
\widetilde{P}_{l}^{m}(x)=x \sqrt{\frac{4 l^{2}-1}{l^{2}-m^{2}}} \widetilde{P}_{l-1}^{m}(x)-\sqrt{\frac{2 l+1}{2 l-3} \frac{(l-1)^{2}-m^{2}}{l^{2}-m^{2}}} \widetilde{P}_{l-2}^{m}(x)
$$

注意到此时的$\widetilde{P}_l^m$满足的递推关系中系数都是接近于$1$的数，不至于导致严重的下溢和上溢。

以及通过连带勒让德函数的定义不难看出：

$$
\widetilde{P}_{m}^{m}(x)=(-)^{m} \frac{\left(1-x^{2}\right)^{m / 2}}{2^{m} m !}(2 m) ! \sqrt{\frac{2 m+1}{4 \pi(2 m) !}}=(-)^{m}\left(1-x^{2}\right)^{m / 2} \sqrt{\frac{(2 m+1) ! !}{4 \pi(2 m) ! !}}
$$

以及有定义$\widetilde{P}_{l}^{m}(x)=0$当$m<l$时。这样就不难从递推公式和初始条件中计算出所有的连带勒让德函数。而且我们注意到实际上$\widetilde{P}_l^m(x)$和$\widetilde{P}_m^m(x)$是成正比的，即：

$$\widetilde{P}_l^m(x)=f(l,m,x)\widetilde{P}_m^m(x)$$

因此实际计算中可以先不代入$\widetilde{P}_m^m(x)$，以减少溢出风险。
为了进一步减少溢出风险，采用对数输出形式，即:
$$\log_{10}|\widetilde{P}_l^m(x)|=\log_{10}|f(l,m,x)|+\log_{10}|\widetilde{P}_m^m(x)|$$
虽然牺牲了精度，但是极大减少了溢出风险。
\subsubsection{实现}
\begin{lstlisting}
def New_GeneralizedLegrend(l,m,x):
	'''
	新的连带勒让德函数计算方法，减少溢出风险
	'''
	P = 0
	Pi = 1# 并不直接代入P_m^m(x)
	if l-m< 0:
		return 0
	for a in range(m+1,l+1):
		Pi,P=\
		x*ms.sqrt((4*a**2-1.0)/(a**2-m**2))*Pi\
		-ms.sqrt((2*a+1.0)/(2*a-3.0)*\
		((a-1.0)**2-m**2)/(a**2-m**2))*P , Pi
	d = 1
		for a in range(1,m+1):
		d *= (2*a+1)/(2*a)  
	res = ms.log10(abs(Pi))+m/2.0*ms.log10(1-x**2)+\
	1/2.0*ms.log10(d/(4*ms.pi))
	return res
\end{lstlisting}
\subsubsection{结果}
结果储存在文件\textbf{./data/Harmonic.txt}之中。

值得注意的是，当$L=1000$,$M=999$时，$Log_{10}(|Y_{lm}|)$已经达到了$10{-2498}$量级
\subsection{电子密度}
\subsubsection{思路}
由于之前已经得出了球谐函数和拉盖尔函数的计算方法，下面直接调用朴素的连带勒让德函数。
\subsubsection{结果}
注意到归一化系数实际上对画热力图没有影响，故下面的图中都略去了归一化系数，绝对数值是不可靠的。而且考虑到$m$仅对角向有贡献，而实际上二维图应该是各项同性的，因此只放$m=0$的图。
\begin{figure}[hbt]
	\centering
	\includegraphics[width=12cm]{./fig/Hydrogen_1.png}
	\caption{氢原子波函数图}
\end{figure}
\subsection{计算氢原子能级}
\subsubsection{思路}
由于氢原子的$SO(4)$对称性，氢原子能级与磁量子数$m$无关：
\begin{align*}
E_{nl}&=\bra{\psi_{nl}}\hat{H}\ket{\psi_{nl}}\\
	  &=-\bra{\psi_{nl}}\frac{1}{2r^2}\pdv{r}(r^2\pdv{r})+\frac{l(l+1)}{2r^2}+\frac{1}{r}\ket{\psi_{nl}}\\
\end{align*}
对于题目中给定的$n=3,l=1,m=1$的波函数
\begin{align*}
\Psi(r, \theta, \varphi)&=\sqrt{\left(\frac{2}{3}\right)^{3} \frac{(n-l-1) !}{2 n(n+l) !}} \mathrm{e}^{-\rho / 2} \rho^{l} L_{n-l-1}^{2 l+1}(\rho) Y_{l}^{m}(\theta, \varphi)\\
&=\frac{4}{81 \sqrt{6}} \mathrm{e}^{-r / 3} r(6-r) Y_{1}^{1}(\theta, \varphi)
\end{align*}
设$f = \mathrm{e}^{-r / 3} r(6-r) $，代入$l=1$，并且取积分域为$[0,60)$，得到能量的积分表达式。
$$
E =\frac{8}{3^{9}} \int_{0}^{60} f\left(f(1-r)-r f^{\prime}-\frac{r^{2} f^{\prime \prime}}{2}\right) \mathrm{d} r
$$
在求解过程中通过不停减小积分间隔以达到精度要求。
\subsubsection{实现}
\begin{lstlisting}
def energy():
'''
能量函数，计算氢原子能量
'''
epsi = 10**(-6)# 数值精度
	d =60.0 # 数据范围
	n = 2 # 初始分隔
	S = d/n*(y(0)+y(d))
	while abs(S*8/3**9+1/18.0) > epsi:
		n *= 2 
		S = sum([y(d*i/(n-1)) for i in range(0,n)])/(n/d)
		print('n = '+str(n))
		print('Error = '+str(S*8/3**9+1/18.0))
	return S*8/3**9

def y(r):
	h = 0.001 #微分精度
	k = f(r)
	dy = (f(r+h)-f(r-h))/(2*h)
	ddy = (f(r+h)+f(r-h)-2*f(r))/h**2
	return k*(k*(1-r)-r*dy-r**2*ddy/2)

def f(r):
	return ms.exp(-r/3.0)*r*(6-r)
\end{lstlisting}
\subsubsection{结果讨论}
数值计算在$n=65536$处停止，数值精度为$e = 8.5\cross10^{-7}$，具体结果如下图:
\begin{figure}[hbt]
	\centering
	\includegraphics[width=8cm]{./fig/Result.png}
	\caption{数值计算氢原子能级结果}
\end{figure}
\end{document}